ВСТУП


У сучасному світі, що все частіше стикається з екстремальними ситуаціями, такими як природні катастрофи, техногенні аварії, терористичні акти та військові конфлікти, системи охорони здоров'я зазнають значних навантажень. Особливо актуальним є питання ефективного розподілу ресурсів для надання невідкладної медичної допомоги постраждалим у таких ситуаціях. Наявність інструментів, що дозволяють автоматизувати та оптимізувати процес приймання пацієнтів у лікарнях, стає вирішальним фактором у збереженні життів та мінімізації ризику отримання безповоротних травм.
Метою цієї роботи є розробка програмної системи для аналізу травм та оптимізації лікування, яка спрямована на автоматизоване визначення ступеня екстренності приймання пацієнтів. Система використовує дані про тип травми, вік пацієнта, місце травмування, та інші ключові параметри для розрахунку вірогідності виживання та уникнення серйозних наслідків. 
Використання запропонованої системи дозволяє значно підвищити ефективність роботи медичних установ у критичних ситуаціях. Завдяки автоматизації процесу аналізу травм та побудови черги на прийом, система допомагає зменшити час очікування пацієнтів на медичну допомогу, оптимізувати використання медичних ресурсів та підвищити загальний рівень виживання серед постраждалих. Це не лише підвищує оперативність і точність надання допомоги, але й сприяє кращому управлінню медичними ресурсами під час катастроф та інших надзвичайних подій.
1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1 Бізнес-вимоги
1.1.1 Бізнес-можливості


На жаль, зараз відбувається все більше інтенсивних змін і викликів, таких як природні катастрофи, техногенні аварії, терористичні атаки та військові конфлікти, існує гостра необхідність у системах, які здатні забезпечити швидке та ефективне реагування на надзвичайні ситуації. Одним із ключових аспектів є оптимізація надання медичної допомоги, особливо в умовах значного навантаження на медичні установи. Ринкова можливість для розробки інноваційної системи, яка допомагає у вирішенні цих завдань, є величезною, оскільки потреба в таких рішеннях постійно зростає у всьому світі.
Сьогоднішні медичні установи часто стикаються з проблемами, пов'язаними з недостатньою координацією під час надзвичайних ситуацій, що призводить до неефективного використання ресурсів та втрати дорогоцінного часу, який є вирішальним для порятунку життів. Чинні процеси управління чергою прийому пацієнтів часто є неавтоматизованими, що зумовлює затримки в прийнятті рішень і, як наслідок, знижує ймовірність виживання пацієнтів із серйозними травмами. У критичних ситуаціях, коли медичні ресурси обмежені, важливо мати системи, які можуть швидко аналізувати дані та надавати пріоритетні рекомендації для надання допомоги тим, хто її потребує найбільше.
Інформаційна система, яка пропонується в рамках цього проєкту, матиме значний вплив на середовище, в якому вона використовується. Система буде застосовуватися в лікарнях та медичних центрах, які стикаються з великими обсягами пацієнтів під час надзвичайних ситуацій. Вона допоможе автоматизувати процеси аналізу та сортування пацієнтів, ґрунтуючись на критеріях, що враховують ймовірність виживання, уникнення безповоротної шкоди та ефективність надання медичної допомоги. Без такої системи лікарям доводиться покладатися на ручні процеси, що значно знижує швидкість і точність прийняття рішень.
Зараз медичні установи часто не в змозі ефективно розподіляти пацієнтів на основі їх стану та потреб через відсутність інтегрованих рішень для аналізу даних у режимі реального часу. Це призводить до ситуацій, коли деякі пацієнти отримують медичну допомогу занадто пізно, що може мати трагічні наслідки. Запропонована система здатна вирішити ці проблеми, надаючи медичним працівникам інструменти для прийняття обґрунтованих рішень на основі аналізу даних, що сприятиме значному підвищенню ефективності роботи та зменшенню втрат серед постраждалих.


1.1.2 Бізнес-цілі та критерії успіху


BO-1: Забезпечити швидку та ефективну побудову черги пацієнтів, виходячи з аналізу ймовірності виживання та уникнення безповоротної шкоди.
BO-2: Впровадити автоматизовані алгоритми, що використовують машинне навчання для аналізу травм та визначення пріоритетів надання медичної допомоги.
BO-3: Надати інструменти, які дозволяють медичним працівникам зосередитися на лікуванні, знижуючи час, витрачений на адміністративні завдання.
BO-4: Використовувати обробку великих обсягів даних для надання медичним установам точної та актуальної інформації, необхідної для ефективного прийняття рішень.
BO-5: Забезпечити ефективну координацію між клініками для оптимального розподілу ресурсів та зменшення перевантаження окремих медичних закладів.
SC-1: Збільшення відсотка пацієнтів, які вижили після надання екстреної медичної допомоги, завдяки оптимізованому розподілу ресурсів.
SC-2: Система сприяє зниженню кількості випадків, коли пацієнти зазнають безповоротних травм через затримки в наданні допомоги.
SC-3: Успішне підключення та обмін даними з наявними системами медичних установ для координації та управління ресурсами.
SC-4: Система дозволяє медичним установам зменшити час на сортування та обробку пацієнтів.
SC-5: Високий рівень задоволеності користувачів (медичного персоналу) завдяки зручності використання системи та її впливу на якість роботи.


1.1.3 Потреби клієнтів або ринку


Програмна система для аналізу травм та оптимізації лікування орієнтована на широкий спектр користувачів у сфері охорони здоров'я, які стикаються з викликами під час надзвичайних ситуацій. Основними клієнтами системи є медичні установи, такі як лікарні, травмпункти, екстрені відділення та мобільні медичні бригади. Крім того, система може бути корисною для державних установ, які відповідають за координацію та управління медичними ресурсами під час катастроф, а також для приватних компаній, що надають послуги з медичного страхування або підтримки в надзвичайних ситуаціях. Потреби ринку та клієнтів до системи:
Швидке реагування на надзвичайні ситуації.
Точний аналіз та пріоритизація.
Інтеграція з наявними системами.
Зменшення адміністративного навантаження.
Стабільність та масштабованість.
Безпека та конфіденційність даних.
Підтримка та навчання системи за новими даними.


1.1.4 Бізнес-ризики


Основні бізнес-ризики при побудові системи та користуванні нею:
Нестабільність роботи під час пікового навантаження.
Високі вимоги до інтеграції з іншими системами.
Можливість помилок у прогнозуванні.
Ризик порушення безпеки та конфіденційності даних.
Щоб уникнути ці ризики буде запроваджено стрес-тестування системи та впровадження масштабованої архітектури для стабільної роботи під час піку навантаження. Використання стандартних API та протоколів для забезпечення сумісності з різними системами та надання підтримки під час впровадження. Регулярне оновлення та вдосконалення моделей машинного навчання на основі нових даних і зворотного зв'язку від користувачів. Впровадження передових засобів шифрування даних, а також регулярні аудити безпеки для виявлення та усунення потенційних вразливостей.


1.2 Концепція рішення
1.2.1 Окреслення концепції


Програмна система для аналізу травм та оптимізації лікування створена для ефективної побудови черги пацієнтів під час надзвичайних ситуацій, забезпечуючи швидку та обґрунтовану пріоритизацію надання медичної допомоги. 
Використовуючи машинне навчання, система автоматично оцінює критичність стану пацієнтів і допомагає медичним установам оптимально розподіляти ресурси, підвищуючи шанси на виживання та мінімізуючи безповоротні травми.
У світі, де цей продукт доступний кожній медичній установі, лікарі зможуть швидко приймати рішення, спираючись на об'єктивний аналіз даних, що допоможе уникнути хаосу під час катастроф та оптимізувати лікувальні процеси. 
Продукт задовольняє потреби сучасної медицини, забезпечує інтеграцію з іншими системами та адаптацію до різних ринкових умов, сприяючи розвитку організації, яка його впроваджує.


1.2.2 Головна функціональність


Новий продукт пропонує комплексну функціональність, спрямовану на ефективне управління процесом приймання та лікування пацієнтів під час надзвичайних ситуацій. Основні характеристики системи включають:
MF-1: Автоматизоване пріоритизування пацієнтів. Система використовує алгоритми машинного навчання для швидкого та точного визначення пріоритету надання медичної допомоги, враховуючи тип травми, час, що минув з моменту травми, вік пацієнта, та інші ключові фактори.
MF-2: Інтеграція з медичними інформаційними системами. Продукт легко інтегрується з існуючими інформаційними системами медичних установ, забезпечуючи обмін даними в режимі реального часу та координацію дій під час екстрених ситуацій.
MF-3: Оптимізація використання медичних ресурсів. Система допомагає максимально ефективно використовувати наявні медичні ресурси, мінімізуючи витрати часу та зусиль на організаційні завдання і дозволяючи медичному персоналу зосередитися на лікуванні пацієнтів.
MF-4: Аналіз та прогнозування результатів лікування. Продукт аналізує зібрані дані для прогнозування ймовірності виживання пацієнтів та уникнення безповоротних травм, надаючи рекомендації щодо оптимальних дій у кожному конкретному випадку.
MF-5: Масштабованість і адаптивність. Система здатна масштабуватися для роботи з великими обсягами даних та адаптуватися під різні умови, що робить її придатною для використання як у великих лікарнях, так і в менших медичних закладах або польових умовах.
MF-6: Високий рівень безпеки та конфіденційності. Забезпечується надійний захист персональних даних пацієнтів, з дотриманням усіх сучасних стандартів безпеки, що є критично важливим для медичних установ.
MF-7: Координація між медичними закладами. Продукт дозволяє ефективно координувати роботу між різними медичними установами, зокрема під час перенаправлення пацієнтів, що потребують невідкладної допомоги, до менш завантажених клінік.


1.2.3 Припущення та залежності


A-1: Доступність даних. Припускається, що медичні установи нададуть необхідні дані про пацієнтів, типи травм та інші важливі параметри для забезпечення точності роботи системи.
A-2: Сумісність систем. Передбачається, що новий продукт зможе інтегруватися з існуючими медичними інформаційними системами без значних технічних труднощів або потреби в масштабних модифікаціях.
A-3: Прийняття користувачами. Оцінюється, що медичний персонал буде готовий навчитися користуватися новою системою і включити її в свої робочі процеси без значних труднощів.
A-4: Регуляторні вимоги. Припускається, що система відповідатиме всім чинним нормативним вимогам щодо обробки персональних даних та медичної інформації.
D-1: Технології машинного навчання. Система покладається на сучасні алгоритми машинного навчання для точного прогнозування і пріоритизації, тому успіх проєкту залежить від доступності та ефективності цих технологій.
D-2: Інтеграція з медичними системами. Успіх проєкту залежить від можливості безперебійної інтеграції з іншими медичними інформаційними системами, включаючи ті, що вже використовуються в лікарнях та клініках.
D-3: Постачальники технологій. Для реалізації проєкту можуть знадобитися сторонні постачальники технологій, такі як постачальники платформ для хостингу або обробки даних, які повинні відповідати високим стандартам надійності та безпеки.
D-4: Партнери з розробки. Успіх проєкту може залежати від наявності партнерів з розробки програмного забезпечення, які мають досвід в створенні систем для медичної сфери та здатні впроваджувати нові технології.


1.3 Рамки та обмеження проєкту
1.3.1 Рамки первинного випуску


Програмна система складається із двох компонентів: back-end, front-end.
Back-end
Back-end системи буде забезпечувати основну логіку роботи та обробку даних. Він включатиме:
− Обробка запитів. Бекенд оброблятиме запити від клієнтської частини, виконує необхідні операції над даними та повертає результати користувачам.
− Взаємодія з базою даних. Бекенд забезпечуватиме зберігання та доступ до даних у базі даних, включаючи інформацію про пацієнтів, травми, клініки та історію випадків.
− Моделі машинного навчання. Бекенд відповідатиме за тренування і використання моделей машинного навчання для прогнозування вірогідності виживання пацієнтів і уникнення безповоротних травм.
Front-end
 Front-end системи буде призначено для взаємодії з кінцевими користувачами, включаючи клієнтів та адміністраторів. Основні функції включають:
− Реєстрація та аутентифікація. Фронтенд забезпечуватиме реєстрацію нових користувачів та аутентифікацію для доступу до системи, щоб забезпечити безпеку і конфіденційність даних.
− Адміністрування. Адміністратори зможуть управляти полями характеристик травм та клінік, включаючи додавання нових типів травм, місць лікування та інших параметрів.
− Завантаження результатів лікування. Фронтенд дозволятиме завантаження історії випадків лікування пацієнтів для подальшого тренування моделей машинного навчання, що допоможе вдосконалити прогнозування.
− Введення нових записів для виконання прогнозування. Клієнти матимуть можливість вводити нові записи про пацієнтів, включаючи інформацію про травми, час їх отримання та інші важливі деталі.
− Відображення результатів. Фронтенд надасть користувачам відображення черги, основаної на ймовірності смерті чи травми та ступеня екстренності лікування.


1.3.2 Рамки наступних випусків


У наступних випусках продукту планується впровадження кількох ключових функцій, які значно розширять можливості системи та підвищать її ефективність:
− Припущення та прорахунок часу на лікування. Додасться функція, яка буде оцінювати ймовірний час, необхідний для лікування кожного пацієнта, на основі типу травми, віку пацієнта та інших факторів. Це дозволить ще точніше враховувати чергу приймання пацієнтів, враховуючи не лише екстренність, але й очікувану тривалість лікування, що підвищить ефективність використання медичних ресурсів.
− Підбір кращої лікарні. Буде реалізована функція, яка дозволить автоматично підбирати найближчу клініку для пацієнтів, базуючись на рівні навантаження в лікарнях. Це допоможе зменшити час очікування та забезпечити оптимальне розподілення пацієнтів між медичними установами, що зменшить навантаження на окремі клініки і покращить загальний процес лікування.
− Оцінка та порівняння результативності клінік. Буде додана функція оцінки результативності лікування в різних клініках, що дозволить здійснювати порівняння між медичними установами. Це дозволить проводити подальший аналіз і оптимізацію системи, зокрема, вдосконалювати моделі машинного навчання на основі отриманих даних, а також допоможе медичним установам покращувати якість надання медичних послуг.
Ці функції зроблять систему ще більш потужною і адаптивною до потреб користувачів, забезпечуючи більш точну оцінку та управління медичними процесами.


1.3.3 Обмеження та винятки


У рамках розробки нового продукту деякі функції та характеристики не планується включити в початкову версію системи. Ось основні з них:
− Інтеграція з усіма типами медичних систем. Хоча система буде інтегруватися з основними медичними інформаційними системами, повна інтеграція з усіма існуючими медичними платформами, особливо старими або нестандартними, не передбачена на початковому етапі.
− Підтримка усіх мов та локалізацій. Початкова версія системи буде доступна тільки на одній мовній версії, переважно англійською або українською. Підтримка багатомовного інтерфейсу та локалізації буде додана у подальших випусках.
− Мобільний додаток. В початковій версії не планується розробка окремого мобільного додатку. Система буде доступна через веб-інтерфейс, а мобільний доступ буде розглянуто в майбутніх оновленнях.
− Реальний моніторинг стану пацієнтів. Хоча система буде аналізувати дані про пацієнтів для прогнозування і пріоритизації, вона не буде включати функції реального моніторингу стану пацієнтів в режимі реального часу, такі як інтеграція з медичними пристроями або сенсорами.
Ці обмеження допоможуть зосередитися на основних функціях системи та забезпечити успішний запуск продукту, залишаючи можливість для розширення і вдосконалення в майбутньому.


1.4 Бізнес-контекст
1.4.1 Профілі зацікавлених сторін


Профілі зацікавлених сторін проєкту наведені в таблиці 1.1.

Таблиця 1.1 – Профілі зацікавлених сторін проєкту
Зацікавлена сторона
Головна цінність
Ставлення
Головний інтерес
Обмеження
Медичні установи
Оптимізація процесу прийому пацієнтів, зниження навантаження
Підтримка
Підвищення ефективності лікування та зменшення навантаження на персонал
Обмежений доступ до даних про пацієнтів та конфіденційність інформації

Таблиця 1.2 – Продовження таблиці профілів зацікавлених сторін проєкту
Зацікавлена сторона
Головна цінність
Ставлення
Головний інтерес
Обмеження
Лікарі та медперсонал
Покращення процесу прийняття рішень та розподілу ресурсів
Підтримка
Отримання точних даних для оптимізації лікування
Недостатнє навчання або адаптація до нової системи
Пацієнти
Підвищення шансів на виживання, своєчасне отримання медичної допомоги
Позитивне
Швидке отримання допомоги у критичних ситуаціях
Залежність від доступності та точності системи
Адміністратори системи
Ефективне управління та підтримка системи
Підтримка
Забезпечення безперебійної роботи та безпеки системи
Обмежені ресурси для обслуговування та підтримки
Регуляторні органи
Відповідність стандартам та забезпечення якості медичних послуг
Обережне
Дотримання вимог та стандартів охорони здоров'я
Суворі нормативні вимоги та стандарти




1.4.2 Пріоритети проєкту


Пріоритети проєкту наведені в таблиці 1.2.

Таблиця 1.2 – Пріоритети проєкту
Показник
Виконання (етапи)
Обмеження (граничні значення)
Ступінь свободи (допустимий діапазон)
План
випуск 1.0 стане доступним до 25.08.2024 
випуск 1.1 – до 29.08.2024




Функції




90%  функцій із 
високим пріоритетом 
мають бути  включені до 
випуску 1.0
Якість




Система не має критичних помилок, які повністю руйнують її працездатність.
Команда


Максимальний розмір команд: 1


Бюджет




Вкластись у встановлений грошовий ліміт



1.4.3 Робоче середовище


Система складається з двох компонентів: back-end, front-end. Планується будувати серверну частину з використанням ASP.NET Core Web API та PostgreSQL 15, тому необхідно забезпечити серверну частину всім необхідним обладнанням для роботи з цими технологіями. Усі запити до сервера повинні бути захищені та передаватись за допомогою протоколу HTTPS, для виконання машинного навчання використовуватиметься технологія ML.NET.
Front-end буде розроблено з використанням HTML, CSS. Веб застосунок буде побудований за допомогою технології .NET BLAZOR WASM.
Система буде використовуватися в медичних установах, розташованих у різних географічних регіонах, що охоплюють кілька часових поясів. Користувачі повинні мати доступ до системи в будь-який час, зокрема під час екстрених ситуацій, коли доступ до даних має бути миттєвим.
Дані генеруються та використовуються в різних місцях, включаючи лікарні, де проводиться лікування пацієнтів, і центральний сервер для обробки та зберігання інформації. Об'єднання даних з різних місць необхідне для точного аналізу та пріоритизації.
Система повинна забезпечувати швидкий час відповіді навіть при віддаленому зберіганні даних, щоб уникнути затримок у прийнятті рішень. Безперебійний доступ до системи є критичним для роботи медичних установ, тому система має бути максимально надійною та доступною.
Вимоги до безпеки включають контроль доступу та захист даних пацієнтів відповідно до медичних стандартів, зокрема шифрування даних і багаторівневу аутентифікацію.

2 ПОСТАНОВКА ЗАДАЧІ


Після опрацювання предметної області, задачею курсової роботи було поставлено створення програмної системи для контролю аналізу травм та оптимізації лікування. 
	База даних системи повинна зберігати інформацію про користувачів, характеристики травм і клінік, записи про результати лікування пацієнтів, а також результати аналізу пріоритетності в черзі на прийом.
Клієнт повинен мати доступ до наступного функціоналу:
реєстрація нових пацієнтів;
введення інформації про травми та клініки;
отримання прогнозу про ймовірність виживання та ризику безповоротної травми;
Адміністратор повинен мати доступ до наступного функціоналу:
адміністрування характеристик травм, додавання нових типів травм та оновлення існуючих;
управління даними про клініки, включаючи додавання нових клінік та оновлення інформації про наявні;
завантаження та обробка історії лікування пацієнтів для подальшого тренування моделі машинного навчання;
управління користувачами, включаючи реєстрацію нових користувачів, зміну ролей і прав доступу;
3 ПРОЄКТУВАННЯ БАЗИ ДАНИХ
3.1 Побудова ER-діаграми


У цьому підрозділі описано та розроблено таблиці в базі даних та зв’язки між ними. На рисунку 3.1 показано, які сутності отримано в результаті аналізу моделі предметної області, описаної в першому розділі.


Рисунок 3.1 – ER-діаграма бази даних

Сутність Користувачі – це сутність, яка містить інформацію про користувачів системи, і пов’язана зв’язком «багато-до-багатьох» із сутністю Ролі.
Сутність Ролі – це сутність, що містить інформацію про рівень доступу користувачів, і пов’язана зв’язком «багато-до-багатьох» із сутністю Користувачі.
Сутність Записи пацієнтів – це сутність, що містить інформацію про лікування пацієнта і його результат, і пов’язана зв’язком «один-до-багатьох» із сутностями Травми та Пріоритетності в черзі та «багато-до-одного» із Клініки.
Сутність Травми – це сутність, що містить інформацію про травми пацієнтів, і пов’язана із сутностями Записи пацієнтів, Типи травм, Місця травм  «багато-до-одного».
Сутність Клініки – це сутність, що містить інформацію про клініки, і пов’язана із сутністю Записи пацієнтів «один-до-багатьох».
Сутність Типи травм – це сутність, що містить інформацію про типи травм і пов’язана із сутністю Травми зв’язком «один-до-багатьох».
Сутність Місця травм – це сутність, що містить інформацію про місця травм і пов’язана із сутністю Травми зв’язком «один-до-багатьох».
Сутність Пріоритетності в черзі – це сутність, що містить інформацію про пріоритетність в черзі певного пацієнта для лікування в певний проміжок часу, і пов’язана із Записи пацієнтів зв’язком «багато-до-одного».


3.2 Побудова логічної моделі бази даних на основі ER-діаграми


На основі розробленої ER-діаграми була створена реляційна база даних, яка містить повний набір таблиць, що точно відображають предметну область. Схема виконана англійською мовою та містить зовнішні ключі. Обрана реляційна модель є ефективною, оскільки забезпечує зручне і швидке адміністрування даних та додавання записів пацієнтів. Зв'язки між таблицями в ER-діаграмі були реалізовані з дотриманням усіх правил шляхом додавання зовнішніх ключів у дочірні таблиці, які посилаються на відповідні первинні ключі в батьківських таблицях.


Рисунок 3.2 – Логічна схема бази даних

Усі таблиці створені згідно з реляційною моделлю і мають відношення «один-до-багатьох». На прикладі зв’язку між цими таблицями можна чітко побачити дотримання перших трьох нормальних форм.
– Перша нормальна форма забезпечує, що в кожній таблиці на перетині будь-якого рядка та стовпця міститься атомарне значення. У нашому випадку це означає, наприклад, що для кожного запису про пацієнта його травми зберігаються в окремій таблиці, а не в одному полі через кому. Таким чином, уникається дублювання даних.
– Друга нормальна форма гарантує, що кожен неключовий атрибут залежить від первинного ключа таблиці, і виключаються часткові залежності.
– Третя нормальна форма передбачає, що всі атрибути функціонально залежать від первинного ключа, і між неключовими атрибутами немає транзитивних залежностей. Це означає, що кожен неключовий стовпець надає інформацію, що не залежить від інших неключових стовпців.
Отже, оскільки всі таблиці в логічній схемі бази даних відповідають третій нормальній формі, можна зробити висновок, що ця база даних знаходиться в третій нормальній формі.

4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ
4.1 Архітектура серверної частини


Перед початком розробки серверної частини слід провести аналіз концептуального моделювання предметної області. 
	Сервер буде обслуговувати два типи користувачів: клієнтів та адміністраторів. API сервера повинно надавати клієнтам можливість додавати пацієнтів із їхніми характеристиками для аналізу та переглядати чергу. 
Адміністратори повинні мати доступ до збереження, редагування і перегляду інформації про характеристики травм та клінік, а також додавання записів про лікування пацієнтів для подальшого навчання моделі машинного навчання. 
Функціональні потреби та взаємодію різних користувачів із системою було визначено за допомогою діаграми прецедентів (див. рис. 4.1).


Рисунок 4.1 – Діаграма прецедентів програмної системи
Створення програмного забезпечення було виконано за допомогою наступних технологій:
−	Серверна частина виконана з використанням платформи .NET, а саме ASP.NET Core Web API мовою C#, для машинного навчання використано ML.NET;
−	Для бази даних використано PostgreSQL по принципу Code First, доступ до неї здійснюється з використанням технології Entity Framework Core.
Система складається з 4 компонентів, а саме: веб серверу з API, веб-застосунку, бази даних, застосунку для тренування моделі машинного навчання. 
Для перегляду та перевірки ендпоінтів API використано Swagger, який надає можливість проводити зручне тестування API, підвищуючи якість розробки та її зручність. Для забезпечення захисту даних та їх конфіденційності використовується протокол HTTPS, який гарантує безпечну передачу інформації.
Для автоматизації процесу відображення між об’єктами використовується бібліотека AutoMapper. Це допомагає зменшити кількість рутинного коду при роботі з об’єктами даних і спрощує розробку серверної частини.
Для реалізації маршрутизації запитів використовуються API контролери, які є вбудованими інструментами в ASP.NET Core. Вони дозволяють розділити програму на логічні компоненти, кожен з яких відповідає за обробку певних типів запитів або дій користувача. Це полегшує управління кодом і його подальше розширення.
Серверна логіка розділена на декілька частин: спілкування із базою даних,  взаємодія із моделлю машинного навчання, спілкування з клієнтом. Також створений консольний застосунок для тренування моделі машинного навчання. Серверна частина розділяє доступ із клієнтською частиною до спільної частини із моделями спілкування Api.
Приклади частин коду серверного застосунка представлено у додатку Б.
Таким чином, було визначено технології та архітектуру серверної частини програмної системи.


4.2 Архітектура клієнтської частини


З точки зору кінцевих користувачів, система повинна надавати простий і зручний інтерфейс для введення нових записів пацієнтів. Користувачі мають мати можливість оперативно переглядати результати аналізу ймовірності виживання пацієнта та ризику отримання безповоротної травми. Крім того, система повинна забезпечувати доступ до черги пацієнтів, яка формується на основі ступеня екстренності лікування. Усе це має відбуватися швидко і без затримок, забезпечуючи високий рівень відгуку системи на дії користувача.
Для адміністратора система повинна надавати функціональність, яка дозволяє зручно керувати параметрами характеристик травм та клінік. Адміністратори повинні мати можливість ефективно управляти користувачами системи, їхніми правами доступу, а також завантажувати та обробляти історію лікування пацієнтів для подальшого тренування моделі машинного навчання. Окрім цього, важливою є наявність аналітичних інструментів, які дозволяють оцінювати ефективність роботи клінік і приймати рішення щодо їхнього подальшого розвитку.
Клієнтська частина системи побудована на основі технології Blazor WebAssembly (WASM), що є сучасним рішенням для розробки веб-інтерфейсів на C#. Використання Blazor WASM забезпечує можливість виконання коду безпосередньо в браузері користувача, без необхідності встановлення додаткових плагінів чи залежності від JavaScript. Це дозволяє створювати продуктивні й швидкі додатки, що надають користувачам зручний інтерфейс для взаємодії із системою. Важливою перевагою Blazor WASM є його інтеграція з .NET екосистемою, що дозволяє використовувати спільну кодову базу для клієнтської і серверної частин. Застосунок на Blazor WASM може працювати на будь-якому сучасному браузері, незалежно від операційної системи, що забезпечує широкий спектр сумісності. Завдяки можливості писати код на C# для клієнтської частини, розробники можуть значно спростити процес підтримки і розвитку системи, оскільки вся розробка здійснюється на одній мові програмування. Це також полегшує інтеграцію з серверною частиною, яка теж написана на .NET, що забезпечує високу продуктивність, надійність і гнучкість системи в цілому.


5 ОПИС ПРОГРАМНОЇ СИСТЕМИ
5.1 Виклик і завантаження


Для виклику програми необхідно завантажити архів, у якому вона знаходиться, та розархівувати її. Оскільки у програмному продукті використовується з’єднання із СКБД PostgreSQL 15, необхідно встановити її з офіційного сайту виробника. 
Щоб застосунку мав з’єднання з базою даних, потрібно встановити рядок підключення з базою даних «ConnectionString» пункт у appsettings.json після чого потрібно запустити міграції бази даних командою «update-database». Також потрібно заповнити поле «SecurityKey» для роботи авторізації системи.
Далі необхідно запустити серверну та клієнтську частини системи. Для цього можна використати засоби середовища розробки Visual Studio, яку необхідно завантажити з офіційного сайту виробника. Треба вибрати пункт «Конфігурувати проєкт запуску» і вибрати проєкти «Server» і «Web».


5.2 Призначення і логічна структура


Можливості програми можна розділити на кілька модулів, зокрема:
реєстрація та аутентифікація;
адміністрування характеристиками для опису записів пацієнтів;
додавання записів пацієнтів і їх перегляд разом із чергою;
Модуль «Авторизація та реєстрація» включає функції для входу в систему та створення нових облікових записів.
Модуль «Адміністрування характеристиками для опису записів пацієнтів» надає можливість додавання видів травм, місць травм, клінік.
Модуль «Додавання записів пацієнтів і їх перегляд разом із чергою» надає можливість заповнення записів пацієнтів, лікування яких вже закінчено, записів пацієнтів, які повинні потрапити в чергу, перегляд цих записів та перегляд черги.


5.3 Опис програмної реалізації
5.3.1 Логіка використання машинного навчання


Найголовнішою логікою є використання машинного навчання та його результатів. Щоб тренувати модель для подальшого використання було створено консольний додаток, який приймає вхідні дані про виконане лікування пацієнтів із їх характеристиками і описом їх травм у форматі csv. Ці дані можна отримати попередньо від системи двома окремими файлами «damage-predict-input.csv» і «death-predict-input.csv» у яких представлений експорт всіх записів лікування в системі. Два файли потрібні, бо необхідно побудувати дві моделі: для передбачення вірогідності смерті, і для передбачення вірогідності уникнення безповоротних травм. 
Консольний застосунок тренер моделі завантажує файли, підготовлює для тренування дані. Щоб це зробити усі над усіма айді-полями проводяться дві процедури: маппінг значення в ключ, щоб айді числового типу опрацьовувалось як ключ, і гаряче кодування, яке запевняє, що між значеннями не буде припущено числових залежностей, наприклад що айді 1 не «менше» айді 2. Слід також зазначити, що моделі машинного навчання не підтримують опрацювання колекцій у полях. Тому список травм був представлений окремими полями, наприклад тип травми 0, тип травми 1 і т.д. Тому кількість травм була обмежена кількістю п’ятьох. Далі застосунок проводить тренування моделей та зберігає їх архівами «damagePredictModel.zip» і «deathPredictModel.zip». Код цього застосунку показаний у Додатку В.


5.3.2 Логіка використання натренованих моделей машинного навчання


Після отримання моделей машинного навчання у системи є змога робити передбачення результатів виконання та вирахування пріоритетності. Результатом передбачення є дві моделі які мають інформацію про: чи виживе пацієнт та вірогідність виживання, чи уникне безповоротних травм та вірогідність цього. Вирахування пріоритетності відбувається наступним чином. Створюються часові періоди, у даному випадку по 30 хвилин, і для кожного пріоритетність вираховується середнім значенням між вірогідністю негативного результату поточного періоду і наступного, після чого це значення переводиться у п’ятибальну шкалу. На поточний момент калькулюється 5 періодів наперед, заради оптимізації системи, але це значення можна змінити. 
	Приклад такої логіки виглядає наступним чином: вірогідність померти у пацієнта 0.2 у поточний проміжок тридцяти хвилин, але в наступний проміжок збільшується до 0.6, середнє значення між цими переводиться в п’ятибальну шкалу. Аналогічно для пріоритетності для уникнення безповоротних травм. Комбінована пріоритетність це комбінація двох, де уникнення смерті має коефіцієнт 1, а уникнення безповоротних травм - 0.3. Код цієї логіки зазначен у Додатку Г.
	Для тренування моделей для тестування системи при розробці були заповнення дані із видами травм «Пошкодження кістки» і «Пошкодження артерії» та локаціями травм «Кінцівка» та «Тулуб». Приклади спрощенні заради простоти тестування в ситуації коли немає дійсних даних від реальних записів лікарень. Дані були зімітовані заради імітації більш швидкої смерті при травмі тулуба та пошкодженні артерії, у свою чергу травма кістки дуже рідко призводить до смерті, але часто до ампутації. Ці дані зазначені у Додатку Д.


5.3.3 Опис веб застосунку


При відкритті веб застосунку система просить увійти в аккаунт або зареєструватись (див. рис. 5.1). 


Рисунок 5.1 – Сторінка аутентифікації


Після того, як адміністратор увійшов у аккаунт й нього є доступ до функціоналу системи (див. рис. 5.2). 


Рисунок 5.2 – Сторінка навігації адміністратора

	Адміністратор може відкрити сторінки керування списком типу травм, локацій травм, клінік, які виглядають аналогічно, як зазначено на рисунку 5.3. Звідти користувач може додавати нові записи перелічених сутностей.


Рисунок 5.3 – Сторінка списку типів травм
	Адміністратор може відкрити сторінку записів про лікування пацієнтів «Cases», де представлений список відповідних сутностей, де зазначено дату лікування та результат (див. рис. 5.4). Із цієї сторінки можна перейти на сторінку додавання нового запису (див. рис. 5.5) де можна заповнити усі характеристики, включно із списком травм.


Рисунок 5.4 – Сторінка списку записів лікування


Рисунок 5.5 – Додавання нового запису лікування

	Останній відділ доступний як адміністратору так і звичайному користувачу. Це відділ черги. На сторінці «Queue» можна побачити чергу на вибраний період часу (див. рис. 5.6). На цій сторінці перелічені записи черги із зазначеною пріоритетністю по п’ятибальній шкалі і відображена характеристика пацієнта.

Рисунок 5.6 – Сторінка черги

	Із цієї сторінки можна додати новий запис до черги (див. рис. 5.7).


Рисунок 5.7 – Сторінка додавання запису до черги

Таким чином, було розглянуто, як користувач може взаємодіяти з розробленою програмною системою.
ВИСНОВКИ


У процесі розробки програмної системи для аналізу травм та оптимізації лікування було виявлено потреби потенційних користувачів і визначено ключові функціональні можливості продукту. Система, яка була розроблена в рамках цієї курсової роботи, орієнтована на ефективне управління чергами приймання пацієнтів у критичних ситуаціях, таких як катастрофи або військові атаки, забезпечуючи таким чином підвищення шансів на виживання та зменшення ризику безповоротних травм.
Розробка системи заснована на сучасних технологіях, таких як Blazor WebAssembly для клієнтської частини та .NET для бекенду, що забезпечує високу продуктивність, інтеграцію та зручність в управлінні кодом. Завдяки цим технологіям, система може бути ефективно використана як для кінцевих користувачів, так і для адміністраторів, забезпечуючи простий інтерфейс для введення та обробки даних, а також потужні інструменти для управління і аналізу.
Завдяки впровадженню нових функціональних можливостей система буде здатна значно покращити процес приймання пацієнтів і оптимізувати використання медичних ресурсів. Це дозволить не лише зменшити навантаження на медичні установи, але й забезпечити більш точний і справедливий розподіл лікувальних ресурсів у критичних ситуаціях.
У підсумку, створена система є важливим інструментом для забезпечення ефективного управління пацієнтами в екстремальних умовах, що має потенціал для значного покращення результатів лікування та зменшення негативних наслідків травм. Розроблене рішення відповідає актуальним вимогам і очікуванням ринку, а також є перспективним для подальшого розвитку та вдосконалення.

ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


PostgreSQL technical documentation. URL: https://www.postgresql.org (дата звернення 19.08.2024).
ASP.NET documentation. URL: https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-8.0 (дата звернення 19.08.2024).
Blazor documentation. URL: https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor (дата звернення 19.08.2024).
ML.NET documentation. URL: https://dotnet.microsoft.com/en-us/apps/machinelearning-ai/ml-dotnet (дата звернення 19.08.2024).

